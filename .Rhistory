require(leafgl)
require(leaflet.extras)
require(mapview)
require(showtext)
# activar showtext
showtext_auto()
font_add_google("Montserrat", "montserrat")
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE, cache = FALSE, cache.lazy = FALSE,
eval = FALSE, class.source = "fold-show")
knitr::opts_knit$set(root.dir = rprojroot::find_rstudio_root_file())
options(encoding = "UTF8")
rm(list = ls())
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE, cache = FALSE, cache.lazy = FALSE,
eval = FALSE, class.source = "fold-show")
knitr::opts_knit$set(root.dir = rprojroot::find_rstudio_root_file())
options(encoding = "UTF8")
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE, cache = FALSE, cache.lazy = FALSE,
eval = FALSE, class.source = "fold-show")
knitr::opts_knit$set(root.dir = rprojroot::find_rstudio_root_file())
options(encoding = "UTF8")
rm(list = ls())
setwd(here::here())
require(showtext)
# activar showtext
showtext_auto()
font_add_google("Montserrat", "montserrat")
require(dplyr)
require(spdplyr)
require(forcats)
require(htmltools)
require(leaflet)
require(htmlwidgets)
require(ggmap)
require(ggplot2)
require(ggridges)
require(grDevices)
require(ggpubr)
require(forcats)
require(rgdal)
require(tibble)
require(sf)
require(stringr)
require(RColorBrewer)
require(leafgl)
require(leaflet.extras)
require(mapview)
load("Output/IMC_2020.RData")
str(IMC_2020)
shape_estados <- geojsonio::geojson_read("Output/Shapes/estados_json.geojson", what = "sp")
shape_municipios <- geojsonio::geojson_read("Output/Shapes/municipios_json.geojson", what = "sp")
shape_colonias_1 <- geojsonio::geojson_read("Output/Shapes/colonias_1_json.geojson", what = "sp")
shape_colonias_2 <- geojsonio::geojson_read("Output/Shapes/colonias_2_json.geojson", what = "sp")
shape_colonias_3 <- geojsonio::geojson_read("Output/Shapes/colonias_3_json.geojson", what = "sp")
shape_colonias_4 <- geojsonio::geojson_read("Output/Shapes/colonias_4_json.geojson", what = "sp")
shape_colonias_5 <- geojsonio::geojson_read("Output/Shapes/colonias_5_json.geojson", what = "sp")
## Data frames
shape_estados@data <- shape_estados@data %>%
select(CVE_ENT)
shape_municipios@data <- shape_municipios@data %>%
select(CVE_MUN)
shape_colonias_1@data <- shape_colonias_1@data %>%
select(CVE_COL)
shape_colonias_2@data <- shape_colonias_2@data %>%
select(CVE_COL)
shape_colonias_3@data <- shape_colonias_3@data %>%
select(CVE_COL)
shape_colonias_4@data <- shape_colonias_4@data %>%
select(CVE_COL)
shape_colonias_5@data <- shape_colonias_5@data %>%
select(CVE_COL)
df_1 <- as.data.frame(coordinates(shape_colonias_1)) %>%
rename("lon" = "V1",
"lat" = "V2")
df_2 <- as.data.frame(coordinates(shape_colonias_2)) %>%
rename("lon" = "V1",
"lat" = "V2")
df_3 <- as.data.frame(coordinates(shape_colonias_3)) %>%
rename("lon" = "V1",
"lat" = "V2")
df_4 <- as.data.frame(coordinates(shape_colonias_4)) %>%
rename("lon" = "V1",
"lat" = "V2")
df_5 <- as.data.frame(coordinates(shape_colonias_5)) %>%
rename("lon" = "V1",
"lat" = "V2")
paleta <- c("#13322B", #Muy alto
"#086953", #Alto
"#4C9562", #Medio
"#D1BB9E", #Bajo
"#C3BA6D") # Muy bajo
paleta <- c(rgb(219, 14, 14, max = 255),
rgb(252, 114, 0, max = 255),
rgb(252, 173, 0, max = 255),
rgb(252, 236, 0, max = 255),
rgb(239, 232, 170, max = 255))
## Paleta de colores
mypalette <- leaflet::colorFactor(palette = paleta,
domain = forcats::fct_relevel(IMC_2020$GM_2020, c("Muy alto", "Alto", "Medio", "Bajo", "Muy bajo")),
na.color = "transparent")
state_popup_colonia1 <- readRDS("Output/PopUp/state_popup_colonia1.RDS")
state_popup_colonia2 <- readRDS("Output/PopUp/state_popup_colonia2.RDS")
state_popup_colonia3 <- readRDS("Output/PopUp/state_popup_colonia3.RDS")
state_popup_colonia4 <- readRDS("Output/PopUp/state_popup_colonia4.RDS")
state_popup_colonia5 <- readRDS("Output/PopUp/state_popup_colonia5.RDS")
popup_content_colonia <- function(data, grado) {
paste("<span class = 'popup-text'><span class = 'popup-Edo'>Estado: ", data$NOM_ENT, "</span><br>",
"<span class = 'popup-Mun'>Municipio: ", data$NOM_MUN, "</span><br>",
"<span class = 'popup-Col'>Colonia: ", data$NOM_COLONIA, "</span><br>",
#"Población Total:", formatC(data$POB_TOT, format = "f", big.mark = " ", digits = 0), "<br>",
"Grado de marginación: <span class='popup-C1'>", data$GM_2020, "</span><br>",
"Índice de marginación: <span class='popup-C1'>", round(data$IM_2020, 2), "</span><br>",
"Índice de marginación normalizado: <span class='popup-C1'>", round(data$IMN_2020, 2),
#"</span><br>",
#              "% Población de 6 a 14 años que no asiste a la escuela:", round(data$P6A14NAE, 2), "<br>",
#              "% Población de 15 años o más sin educación básica:", round(data$SBASC, 2), "<br>",
#              "% Población de sin derechohabiencia a los servicios de salud:", round(data$PSDSS, 2), "<br>",
#              "% Ocupantes en viviendas particulares sin drenaje ni excusado:", round(data$OVSDE, 2), "<br>",
#              "% Ocupantes en viviendas particulares sin energía eléctrica:", round(data$OVSEE, 2), "<br>",
#              "% Ocupantes en viviendas particulares sin agua entubada:", round(data$OVSAE, 2), "<br>",
#              "% Ocupantes en viviendas particulares con piso de tierra:", round(data$OVPT, 2), "<br>",
#              "% Ocupantes en viviendas con algún nivel de hacinamiento:", round(data$OVHAC, 2), "<br>",
#              "% Ocupantes en viviendas particulares sin refrigerador:", round(data$OVSREF, 2), "<br>",
#              "% Ocupantes en viviendas particulares sin internet:", round(data$OVSINT, 2), "<br>",
#              "% Ocupantes en viviendas particulares sin celular:", round(data$OVSCEL, 2), "<br>",
"</span>")
}
# Estructura del título
tag.map.title <- tags$style(HTML("
.leaflet-control.map-title {
transform: translate(-50%,20%);
position: fixed !important;
left: 50%;
text-align: center;
padding-left: 10px;
padding-right: 10px;
background: rgba(255,255,255,0.75);
font-weight: bold;
font-size: 28px;
}
"))
# Nota de página
title <- tags$div(
tag.map.title, HTML("Fuentes:Estimaciones del CONAPO con base en el INEGI, Censo de Población y Vivienda 2020.")
)
leaflet$dependencies <- list(htmlDependency(
name = "font-awesome",
version = "4.3.0",
# if local file use file instead of href below
#  with an absolute path
src = c(href = paste(here::here())),
stylesheet = "css_style.css"
)
)
leaflet <- leaflet(options = leafletOptions(minZoom = 5)) %>%
addTiles() %>%
setView(lat = 19.04823666, lng = -99.36492420, zoom = 10) %>%
addProviderTiles(providers$OpenStreetMap,
options = providerTileOptions(minZoom = 2, maxZoom = 5)) %>%
setMaxBounds(lng1 = -99.36492420,
lat1 = 19.04823666,
lng2 = -98.94030282,
lat2 = 19.59275728) %>%
# capa de grado "Muy alto"
addTopoJSON(capa_colonias_1_topojson,
fillColor = paleta[1], # Paleta de colores
fillOpacity = 0.8,
stroke = TRUE, # Dibujar los bordes del polígono
weight = 0.3,  # line thickness
dashArray = "1",
opacity = 1,
color = "#D4D0BD",  # line colour
group = "Muy alto") %>%
# capa de grado "Alto"
addTopoJSON(capa_colonias_2_topojson,
fillColor = paleta[2], # Paleta de colores
fillOpacity = 0.8,
stroke = TRUE, # Dibujar los bordes del polígono
weight = 0.3,  # line thickness
dashArray = "1",
opacity = 1,
color = "#D4D0BD",  # line colour
group = "Alto") %>%
# capa de grado "Medio"
addTopoJSON(capa_colonias_3_topojson,
fillColor = paleta[3], # Paleta de colores
fillOpacity = 0.8,
stroke = TRUE, # Dibujar los bordes del polígono
weight = 0.3,  # line thickness
dashArray = "1",
opacity = 1,
color = "#D4D0BD",  # line colour
group = "Medio") %>%
# capa de grado "Bajo"
addTopoJSON(capa_colonias_4_topojson,
fillColor = paleta[4], # Paleta de colores
fillOpacity = 0.8,
stroke = TRUE, # Dibujar los bordes del polígono
weight = 0.3,  # line thickness
dashArray = "1",
opacity = 1,
color = "#D4D0BD",  # line colour
group = "Bajo") %>%
# capa de grado "Muy bajo"
addTopoJSON(capa_colonias_5_topojson,
fillColor = paleta[5], # Paleta de colores
fillOpacity = 0.8,
stroke = TRUE, # Dibujar los bordes del polígono
weight = 0.3,  # line thickness
dashArray = "1",
opacity = 1,
color = "#D4D0BD",  # line colour
group = "Muy bajo") %>%
# capa de estados
addTopoJSON(capa_estados_topojson,
fillColor = 'transparent',
color = "#575757",
opacity = 0.7,
weight = 2.1) %>%
addControl(title,
position = "bottomright") %>%
addResetMapButton() %>%
addSearchOSM() %>%
addScaleBar(position = "bottomright",
options = scaleBarOptions(maxWidth = 100,
metric = TRUE,
imperial = TRUE,
updateWhenIdle = TRUE)) %>%
addLegend("bottomright",
colors = paleta,
labels = c("Muy alto", "Alto", "Medio", "Bajo", "Muy bajo"),
values = ~forcats::fct_relevel(GM_2020, c("Muy alto", "Alto", "Medio", "Bajo", "Muy bajo")),
title = stringr::str_wrap("Grado de marginación", 15),
opacity =  0.7) %>%
addLayersControl(overlayGroups = c("Muy alto", "Alto", "Medio", "Bajo", "Muy bajo"),
options = layersControlOptions(collapsed = TRUE)) # %>%
popup_content_colonia <- function(data, grado) {
paste("<span class = 'popup-text'><span class = 'popup-Edo'>Estado: ", data$NOM_ENT, "</span><br>",
"<span class = 'popup-Mun'>Municipio: ", data$NOM_MUN, "</span><br>",
"<span class = 'popup-Col'>Colonia: ", data$NOM_COLONIA, "</span><br>",
#"Población Total:", formatC(data$POB_TOT, format = "f", big.mark = " ", digits = 0), "<br>",
"Grado de marginación: <span class='popup-C1'>", data$GM_2020, "</span><br>",
"Índice de marginación: <span class='popup-C1'>", round(data$IM_2020, 2), "</span><br>",
"Índice de marginación normalizado: <span class='popup-C1'>", round(data$IMN_2020, 2),
#"</span><br>",
#              "% Población de 6 a 14 años que no asiste a la escuela:", round(data$P6A14NAE, 2), "<br>",
#              "% Población de 15 años o más sin educación básica:", round(data$SBASC, 2), "<br>",
#              "% Población de sin derechohabiencia a los servicios de salud:", round(data$PSDSS, 2), "<br>",
#              "% Ocupantes en viviendas particulares sin drenaje ni excusado:", round(data$OVSDE, 2), "<br>",
#              "% Ocupantes en viviendas particulares sin energía eléctrica:", round(data$OVSEE, 2), "<br>",
#              "% Ocupantes en viviendas particulares sin agua entubada:", round(data$OVSAE, 2), "<br>",
#              "% Ocupantes en viviendas particulares con piso de tierra:", round(data$OVPT, 2), "<br>",
#              "% Ocupantes en viviendas con algún nivel de hacinamiento:", round(data$OVHAC, 2), "<br>",
#              "% Ocupantes en viviendas particulares sin refrigerador:", round(data$OVSREF, 2), "<br>",
#              "% Ocupantes en viviendas particulares sin internet:", round(data$OVSINT, 2), "<br>",
#              "% Ocupantes en viviendas particulares sin celular:", round(data$OVSCEL, 2), "<br>",
"</span>")
}
# Estructura del título
tag.map.title <- tags$style(HTML("
.leaflet-control.map-title {
transform: translate(-50%,20%);
position: fixed !important;
left: 50%;
text-align: center;
padding-left: 10px;
padding-right: 10px;
background: rgba(255,255,255,0.75);
font-weight: bold;
font-size: 28px;
}
"))
# Nota de página
title <- tags$div(
tag.map.title, HTML("Fuentes:Estimaciones del CONAPO con base en el INEGI, Censo de Población y Vivienda 2020.")
)
leaflet$dependencies <- list(htmlDependency(
name = "font-awesome",
version = "4.3.0",
# if local file use file instead of href below
#  with an absolute path
src = c(href = paste(here::here())),
stylesheet = "css_style.css"
)
)
capa_estados_topojson <- readRDS("Output/Shapes/capa_estados_topojson.rds")
capa_colonias_1_topojson <- readRDS("Output/Shapes/capa_colonias_1_topojson.rds")
capa_colonias_2_topojson <- readRDS("Output/Shapes/capa_colonias_2_topojson.rds")
capa_colonias_3_topojson <- readRDS("Output/Shapes/capa_colonias_3_topojson.rds")
capa_colonias_4_topojson <- readRDS("Output/Shapes/capa_colonias_4_topojson.rds")
capa_colonias_5_topojson <- readRDS("Output/Shapes/capa_colonias_5_topojson.rds")
leaflet <- leaflet(options = leafletOptions(minZoom = 5)) %>%
addTiles() %>%
setView(lat = 19.04823666, lng = -99.36492420, zoom = 10) %>%
addProviderTiles(providers$OpenStreetMap,
options = providerTileOptions(minZoom = 2, maxZoom = 5)) %>%
setMaxBounds(lng1 = -99.36492420,
lat1 = 19.04823666,
lng2 = -98.94030282,
lat2 = 19.59275728) %>%
# capa de grado "Muy alto"
addTopoJSON(capa_colonias_1_topojson,
fillColor = paleta[1], # Paleta de colores
fillOpacity = 0.8,
stroke = TRUE, # Dibujar los bordes del polígono
weight = 0.3,  # line thickness
dashArray = "1",
opacity = 1,
color = "#D4D0BD",  # line colour
group = "Muy alto") %>%
# capa de grado "Alto"
addTopoJSON(capa_colonias_2_topojson,
fillColor = paleta[2], # Paleta de colores
fillOpacity = 0.8,
stroke = TRUE, # Dibujar los bordes del polígono
weight = 0.3,  # line thickness
dashArray = "1",
opacity = 1,
color = "#D4D0BD",  # line colour
group = "Alto") %>%
# capa de grado "Medio"
addTopoJSON(capa_colonias_3_topojson,
fillColor = paleta[3], # Paleta de colores
fillOpacity = 0.8,
stroke = TRUE, # Dibujar los bordes del polígono
weight = 0.3,  # line thickness
dashArray = "1",
opacity = 1,
color = "#D4D0BD",  # line colour
group = "Medio") %>%
# capa de grado "Bajo"
addTopoJSON(capa_colonias_4_topojson,
fillColor = paleta[4], # Paleta de colores
fillOpacity = 0.8,
stroke = TRUE, # Dibujar los bordes del polígono
weight = 0.3,  # line thickness
dashArray = "1",
opacity = 1,
color = "#D4D0BD",  # line colour
group = "Bajo") %>%
# capa de grado "Muy bajo"
addTopoJSON(capa_colonias_5_topojson,
fillColor = paleta[5], # Paleta de colores
fillOpacity = 0.8,
stroke = TRUE, # Dibujar los bordes del polígono
weight = 0.3,  # line thickness
dashArray = "1",
opacity = 1,
color = "#D4D0BD",  # line colour
group = "Muy bajo") %>%
# capa de estados
addTopoJSON(capa_estados_topojson,
fillColor = 'transparent',
color = "#575757",
opacity = 0.7,
weight = 2.1) %>%
addControl(title,
position = "bottomright") %>%
addResetMapButton() %>%
addSearchOSM() %>%
addScaleBar(position = "bottomright",
options = scaleBarOptions(maxWidth = 100,
metric = TRUE,
imperial = TRUE,
updateWhenIdle = TRUE)) %>%
addLegend("bottomright",
colors = paleta,
labels = c("Muy alto", "Alto", "Medio", "Bajo", "Muy bajo"),
values = ~forcats::fct_relevel(GM_2020, c("Muy alto", "Alto", "Medio", "Bajo", "Muy bajo")),
title = stringr::str_wrap("Grado de marginación", 15),
opacity =  0.7) %>%
addLayersControl(overlayGroups = c("Muy alto", "Alto", "Medio", "Bajo", "Muy bajo"),
options = layersControlOptions(collapsed = TRUE)) # %>%
leaflet$dependencies <- list(htmlDependency(
name = "font-awesome",
version = "4.3.0",
# if local file use file instead of href below
#  with an absolute path
src = c(href = paste(here::here())),
stylesheet = "css_style.css"
)
)
leaflet <- leaflet(options = leafletOptions(minZoom = 5)) %>%
addTiles() %>%
setView(lat = 19.04823666, lng = -99.36492420, zoom = 10) %>%
addProviderTiles(providers$OpenStreetMap,
options = providerTileOptions(minZoom = 2, maxZoom = 5)) %>%
setMaxBounds(lng1 = -99.36492420,
lat1 = 19.04823666,
lng2 = -98.94030282,
lat2 = 19.59275728) %>%
# capa de grado "Muy alto"
addTopoJSON(capa_colonias_1_topojson,
fillColor = paleta[1], # Paleta de colores
fillOpacity = 0.8,
stroke = TRUE, # Dibujar los bordes del polígono
weight = 0.3,  # line thickness
dashArray = "1",
opacity = 1,
color = "#D4D0BD",  # line colour
group = "Muy alto") %>%
# capa de grado "Alto"
addTopoJSON(capa_colonias_2_topojson,
fillColor = paleta[2], # Paleta de colores
fillOpacity = 0.8,
stroke = TRUE, # Dibujar los bordes del polígono
weight = 0.3,  # line thickness
dashArray = "1",
opacity = 1,
color = "#D4D0BD",  # line colour
group = "Alto") %>%
# capa de grado "Medio"
addTopoJSON(capa_colonias_3_topojson,
fillColor = paleta[3], # Paleta de colores
fillOpacity = 0.8,
stroke = TRUE, # Dibujar los bordes del polígono
weight = 0.3,  # line thickness
dashArray = "1",
opacity = 1,
color = "#D4D0BD",  # line colour
group = "Medio") %>%
# capa de grado "Bajo"
addTopoJSON(capa_colonias_4_topojson,
fillColor = paleta[4], # Paleta de colores
fillOpacity = 0.8,
stroke = TRUE, # Dibujar los bordes del polígono
weight = 0.3,  # line thickness
dashArray = "1",
opacity = 1,
color = "#D4D0BD",  # line colour
group = "Bajo") %>%
# capa de grado "Muy bajo"
addTopoJSON(capa_colonias_5_topojson,
fillColor = paleta[5], # Paleta de colores
fillOpacity = 0.8,
stroke = TRUE, # Dibujar los bordes del polígono
weight = 0.3,  # line thickness
dashArray = "1",
opacity = 1,
color = "#D4D0BD",  # line colour
group = "Muy bajo") %>%
# capa de estados
addTopoJSON(capa_estados_topojson,
fillColor = 'transparent',
color = "#575757",
opacity = 0.7,
weight = 2.1) %>%
addControl(title,
position = "bottomright") %>%
addResetMapButton() %>%
addSearchOSM() %>%
addScaleBar(position = "bottomright",
options = scaleBarOptions(maxWidth = 100,
metric = TRUE,
imperial = TRUE,
updateWhenIdle = TRUE)) %>%
addLegend("bottomright",
colors = paleta,
labels = c("Muy alto", "Alto", "Medio", "Bajo", "Muy bajo"),
values = ~forcats::fct_relevel(GM_2020, c("Muy alto", "Alto", "Medio", "Bajo", "Muy bajo")),
title = stringr::str_wrap("Grado de marginación", 15),
opacity =  0.7) %>%
addLayersControl(overlayGroups = c("Muy alto", "Alto", "Medio", "Bajo", "Muy bajo"),
options = layersControlOptions(collapsed = TRUE)) # %>%
leaflet <- leaflet %>%
addCircles(data = df_1,
lng = ~lon,
lat = ~lat,
color = paleta[1], # Paleta de colores
fillOpacity = 0.5,
stroke = FALSE, # dibujar los bordes del polígono
radius = ~3,
weight = 0.1,  # line thickness
dashArray = "1",
opacity = 0.3,
popup = popup_content_colonia(IMC_2020 %>% filter(GM_2020 == "Muy alto")),
popupOptions = popupOptions(closeOnClick = FALSE,
textsize = '15px',
direction = "auto",
opacity = 0.3,
padding = '8px 150px 5px 1px',
fontfamily = "montserrat"),
group = "Muy alto"
)
leaflet
saveRDS(leaflet, "Graficos/leaflet.RDS")
saveWidget(leaflet, "Graficos/leaflet.html", selfcontained = TRUE)
install.packages("shiny")
install.packages("shiny.react")
install.packages("shinypanel")
install.packages("shinyEffects")
leaflet <- leaflet %>%
addCircles(data = df_1,
lng = ~lon,
lat = ~lat,
color = paleta[1], # Paleta de colores
fillOpacity = 0.5,
stroke = FALSE, # dibujar los bordes del polígono
radius = ~10,
weight = 0.1,  # line thickness
dashArray = "1",
opacity = 0.3,
popup = popup_content_colonia(IMC_2020 %>% filter(GM_2020 == "Muy alto")),
popupOptions = popupOptions(closeOnClick = FALSE,
textsize = '15px',
direction = "auto",
opacity = 0.3,
padding = '8px 150px 5px 1px',
fontfamily = "montserrat"),
group = "Muy alto"
)
saveRDS(leaflet, "Graficos/leaflet.RDS")
saveWidget(leaflet, "Graficos/leaflet.html", selfcontained = TRUE)
